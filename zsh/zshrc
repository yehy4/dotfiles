# Keep 1 million lines of history.
HISTFILE=~/.zsh_history
HISTSIZE=1000000
SAVEHIST=1000000

# Decrease timeout waiting for key combinations (default is 40).
KEYTIMEOUT=1

# Use neovim as the default editor.
export EDITOR=nvim

# Share history among concurrent shells.
setopt share_history
# Record timestamp of command in HISTFILE.
setopt extended_history
# Remove previous duplicates of the current command.
setopt hist_ignore_all_dups

# Correct mis-spelled commands.
setopt correct_all

# Prevent prevent commands from failing due to no globbing matches. See
# https://unix.stackexchange.com/a/310553.
unsetopt no_match

# Disable terminal beeps during completion.
unsetopt list_beep

# Enable completion from both sides.
setopt complete_in_word

# Show completion menu if there is more than one match.
zstyle ':completion:*' menu select=1
# Insert the full unambiguous prefix in a term before triggering the completion menu.
zstyle ':completion:*' insert-unambiguous true
# Use colors when displaying the completion menu for files and directories.
eval `dircolors` # Set LS_COLORS environment variable
zstyle ':completion:*' list-colors ${(s.:.)LS_COLORS}
# Enable case-insensitive completion.
zstyle ':completion:*' matcher-list 'm:{[:lower:]}={[:upper:]} m:{[:lower:][:upper:]}={[:upper:][:lower:]}'
autoload -Uz compinit && compinit
zmodload zsh/complist

# Load version control information.
# See https://zsh.sourceforge.io/Doc/Release/User-Contributions.html#Version-Control-Information.
if [[ $GIT_BASED_WORKFLOW == 1 ]]; then
  autoload -Uz vcs_info
  zstyle ':vcs_info:*' enable git svn
  zstyle ':vcs_info:*' check-for-changes true
  zstyle ':vcs_info:*' stagedstr '|S'
  zstyle ':vcs_info:*' unstagedstr '|U'
  # Format the vcs_info_msg_0_ variable.
  zstyle ':vcs_info:git*' formats "%f(%F{#88C0D0}î‚ %b%f%F{#EBCB8B}%a%m%u%c%f) "
  precmd() { vcs_info }
fi

# Set the prompt.
setopt prompt_subst # Allow substitutions in the prompt to be able to use variables.
PROMPT='%B%F{#A3BE8C}$%b%f '
RPROMPT='${vcs_info_msg_0_}%F{#88C0D0}%~'

# Use vi keybindings.
bindkey -v
bindkey -M menuselect 'h' vi-backward-char
bindkey -M menuselect 'k' vi-up-line-or-history
bindkey -M menuselect 'l' vi-forward-char
bindkey -M menuselect 'j' vi-down-line-or-history
bindkey '^?' backward-delete-char # See https://unix.stackexchange.com/a/290403.

# Navigate history using k and j.
autoload -U up-line-or-beginning-search down-line-or-beginning-search
zle -N up-line-or-beginning-search
zle -N down-line-or-beginning-search
bindkey -M vicmd 'k' up-line-or-beginning-search
bindkey -M vicmd 'j' down-line-or-beginning-search

# Use a beam cursor when in vi insert mode and a block cursor in normal mode.
# Using these functions is only explicitly needed when running zsh inside tmux.
# Otherwise, this behavior is already built into zsh.
# See https://superuser.com/a/1501674
function _set_block_cursor() { echo -ne '\e[2 q' }
function _set_beam_cursor() { echo -ne '\e[6 q' }
function zle-keymap-select {
  if [[ ${KEYMAP} == vicmd ]]; then
      _set_block_cursor
  else
      _set_beam_cursor
  fi
}
zle -N zle-keymap-select
precmd_functions+=(_set_beam_cursor) # Use beam cursor when starting new prompt.

source `dirname $0`/zsh-autosuggestions/zsh-autosuggestions.zsh
source `dirname $0`/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh

alias ls='ls --color'
alias gitlog='git log --all --graph --decorate --oneline'

# Attach to a (newly-created or existing) tmux session called "main" if not
# already inside a tmux session, and the terminal is not gnome-terminal (to
# accomodate "open in terminal" when right clicking in Nautilus/Gnome Files).
if [ -z "$TMUX" ] && ps -o cmd= -p $(ps -o ppid= -p $$) | grep -v -q gnome-terminal; then
  tmux new-session -A -s main
fi
